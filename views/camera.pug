extends base.pug

block bodyContent
    h1= title
    h3 Camera takes pictures on command and sends them to controller
    .select
      label(for="videoSource") Video Source:
      select(id="videoSource")   
    video(autoplay, class="new-snap-container")
    button.snap-btn Take Snapshot
    canvas.new-snap-container
block scriptsContent
  script.
    let video = document.querySelector('video')
    let canvas = window.canvas = document.querySelector('canvas')
    let button = document.querySelector('button')
    let videoSelect = document.querySelector('select#videoSource')
    canvas.width = 480
    canvas.height = 360
    button.onclick = () => {
      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      canvas.getContext('2d')
        .drawImage(video, 0, 0, canvas.width, canvas.height)
    }
    
        
        
    const gotDevices = (deviceInfos) => {
      for(var i=0; i !== deviceInfos.length; i++) {
        let deviceInfo = deviceInfos[i]
        let option = document.createElement('option')
        option.value = deviceInfo.deviceId
        
        if (deviceInfo.kind === 'videoinput') {
          option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`
          videoSelect.appendChild(option)
        } else {
          console.log('Found another kind of source/device:', deviceInfo)
        }
      }
    }
    
    const getStream = () => {
      if (window.stream) {
        window.stream.getTracks().forEach(track => track.stop())
      }
      
      let constraints = { 
        audio: false, 
        video: {
          optional: [{
            sourceId: videoSelect.value
          }]
        } 
      }
      navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError)
    }
    
    
    const gotStream = (stream) => {
      window.stream = stream
      video.srcObject = stream
    }
    
    const handleError = (err) => {
      console.log(`navigator.getUserMedia error: ${err}`)
    }
    

    videoSelect.onchange = getStream
    navigator.mediaDevices.enumerateDevices()
      .then(gotDevices).then(getStream).catch(handleError)
        
    const convertCanvasToImage = (canvas) => {
      let image = new Image()
      image.src = canvas.toDataURL('image/png')
      return image
    }
    
    let socket = io.connect()
    
    const sendImage = (canvas) => {
      let message = canvas.toDataURL('image/png')
      socket.emit('new image', message)
    }
    socket.on('take a new snap', () => {
      button.onclick()
      sendImage(canvas)
    })
